from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
file_path = "/content/drive/My Drive/archive/ASIANPAINT.csv"
data = pd.read_csv(file_path)
cell_value = data.loc[0, 'Symbol']
cell_value

import pandas as pd

data = pd.read_csv(file_path)

summary = data['Close'].describe()

print(summary)

import numpy as np
import matplotlib.pyplot as plt

# Load financial data from a CSV file into a DataFrame
def load_data(filename):
    df = pd.read_csv(filename, parse_dates=True, index_col='Date')
    return df

# Calculate basic statistics and generate a summary report
def generate_summary_report(data):
    summary = data.describe()
    return summary

# Generate a line chart to visualize stock prices
def generate_price_chart(data, stock_symbol):
    plt.figure(figsize=(12, 6))
    plt.plot(data.index, data['Close'], label=stock_symbol)
    plt.xlabel('Date')
    plt.ylabel('Closing Price')
    plt.title(f'{stock_symbol} Stock Price Over Time')
    plt.legend()
    plt.grid(True)
    plt.show()

# Calculate and plot moving averages
def plot_moving_averages(data, stock_symbol, short_window=20, long_window=50):
    short_rolling = data['Close'].rolling(window=short_window).mean()
    long_rolling = data['Close'].rolling(window=long_window).mean()

    plt.figure(figsize=(12, 6))
    plt.plot(data.index, data['Close'], label=stock_symbol)
    plt.plot(short_rolling.index, short_rolling, label=f'{short_window}-Day SMA', linestyle='--')
    plt.plot(long_rolling.index, long_rolling, label=f'{long_window}-Day SMA', linestyle='--')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'{stock_symbol} Stock Price with Moving Averages')
    plt.legend()
    plt.grid(True)
    plt.show()

# Example usage
if __name__ == "__main__":
    filename = file_path
    stock_symbol = cell_value

    data = load_data(filename)

    summary_report = generate_summary_report(data)
    print("Summary Report:")
    print(summary_report)

    generate_price_chart(data, stock_symbol)

    plot_moving_averages(data, stock_symbol)
